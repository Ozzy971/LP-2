import matplotlib.pyplot as plt
import numpy as np

class NQueens:
    def __init__(self, n):
        self.n = n
        self.board = [-1] * n 

    def is_safe(self, row, col):
        for prev_row in range(row):
            if self.board[prev_row] == col or abs(self.board[prev_row] - col) == abs(prev_row - row):
                return False
        return True

    def solve_backtracking(self, row=0):
        if row == self.n:
            self.visualize_board()  /
            return True

        for col in range(self.n):
            if self.is_safe(row, col):
                self.board[row] = col  
                self.visualize_board()  
                if self.solve_backtracking(row + 1):
                    return True
                self.board[row] = -1  
                self.visualize_board()  

        return False  

    def visualize_board(self):
        grid = np.zeros((self.n, self.n))
        for row in range(self.n):
            if self.board[row] != -1:
                grid[row, self.board[row]] = 1

        plt.clf()  
        fig, ax = plt.subplots(figsize=(5, 5))
        ax.matshow(grid, cmap="Blues", alpha=0.5)

        # Draw gridlines
        ax.set_xticks(np.arange(self.n+1) - 0.5, minor=True)
        ax.set_yticks(np.arange(self.n+1) - 0.5, minor=True)
        ax.grid(which='minor', color='black', linestyle='-', linewidth=2)

        for i in range(self.n):
            if self.board[i] != -1:
                ax.text(self.board[i], i, 'â™›', ha='center', va='center', fontsize=20, color='black')

        ax.set_xticks(np.arange(self.n))
        ax.set_yticks(np.arange(self.n))
        ax.set_xticklabels([])
        ax.set_yticklabels([])
        ax.set_title(f"N-Queens Step-by-Step ({self.n}x{self.n})", fontsize=14)

        plt.pause(1)  


if __name__ == "__main__":
    n = 4  
    nqueens = NQueens(n)
    plt.ion() 
    nqueens.solve_backtracking()  
    plt.ioff()  
    plt.show()  
