import matplotlib.pyplot as plt
import numpy as np

class NQueens:
    def __init__(self, n):
        self.n = n
        self.board = [-1] * n  # -1 indicates no queen is placed in that row

    def is_safe(self, row, col):
        """
        Check if placing a queen at (row, col) is safe from other queens.
        A queen is safe if no other queen is in the same column or diagonals.
        """
        for prev_row in range(row):
            if self.board[prev_row] == col or abs(self.board[prev_row] - col) == abs(prev_row - row):
                return False
        return True

    def solve_backtracking(self, row=0):
        """
        Solve the N-Queens problem using backtracking and visualize each step.
        """
        if row == self.n:
            self.visualize_board()  # Visualize the solution when all queens are placed
            return True

        for col in range(self.n):
            if self.is_safe(row, col):
                self.board[row] = col  # Place queen
                self.visualize_board()  # Visualize after placing
                if self.solve_backtracking(row + 1):
                    return True
                self.board[row] = -1  # Remove queen (backtrack)
                self.visualize_board()  # Visualize after backtracking

        return False  # No solution found in this path

    def visualize_board(self):
        """
        Visualize the current board using matplotlib.
        """
        grid = np.zeros((self.n, self.n))
        for row in range(self.n):
            if self.board[row] != -1:
                grid[row, self.board[row]] = 1

        plt.clf()  # Clear previous plot
        fig, ax = plt.subplots(figsize=(5, 5))
        ax.matshow(grid, cmap="Blues", alpha=0.5)

        # Draw gridlines
        ax.set_xticks(np.arange(self.n+1) - 0.5, minor=True)
        ax.set_yticks(np.arange(self.n+1) - 0.5, minor=True)
        ax.grid(which='minor', color='black', linestyle='-', linewidth=2)

        for i in range(self.n):
            if self.board[i] != -1:
                ax.text(self.board[i], i, 'â™›', ha='center', va='center', fontsize=20, color='black')

        ax.set_xticks(np.arange(self.n))
        ax.set_yticks(np.arange(self.n))
        ax.set_xticklabels([])
        ax.set_yticklabels([])
        ax.set_title(f"N-Queens Step-by-Step ({self.n}x{self.n})", fontsize=14)

        plt.pause(1)  # Pause for 1 second

# --- Example usage ---
if __name__ == "__main__":
    n = 4  # Size of board (you can change it)
    nqueens = NQueens(n)
    plt.ion()  # Turn on interactive mode for real-time plotting
    nqueens.solve_backtracking()  # Start solving
    plt.ioff()  # Turn off interactive mode
    plt.show()  # Show final board
